     1                                  ; System Information Program (v1.0, January 28 2020)
     2                                  ; Written by Ian Seyler
     3                                  ;
     4                                  ; BareMetal compile:
     5                                  ; nasm sysinfo.asm -o sysinfo.app
     6                                  
     7                                  [BITS 64]
     8                                  [ORG 0x0000000000200000]
     9                                  
    10                                  %INCLUDE "libBareMetal.asm"
     1                              <1> ; =============================================================================
     2                              <1> ; BareMetal -- a 64-bit OS written in Assembly for x86-64 systems
     3                              <1> ; Copyright (C) 2008-2020 Return Infinity -- see LICENSE.TXT
     4                              <1> ;
     5                              <1> ; Version 1.0
     6                              <1> ; =============================================================================
     7                              <1> 
     8                              <1> 
     9                              <1> b_input			equ 0x0000000000100010	; Scans keyboard for input. OUT: AL = 0 if no key pressed, otherwise ASCII code
    10                              <1> b_output		equ 0x0000000000100018	; Displays a number of characters. IN: RSI = message location, RCX = number of characters
    11                              <1> 
    12                              <1> b_ethernet_tx		equ 0x0000000000100020	; Transmit a packet via Ethernet. IN: RSI = Memory location where data is stored, RDI = Pointer to 48 bit destination address, BX = Type of packet (If set to 0 then the EtherTyp
    13                              <1> b_ethernet_rx		equ 0x0000000000100028	; Polls the Ethernet card for received data. IN: RDI = Memory location where packet will be stored. OUT: RCX = Length of packet
    14                              <1> 
    15                              <1> b_disk_read		equ 0x0000000000100030	; Read from the disk.
    16                              <1> b_disk_write		equ 0x0000000000100038	; Write to the disk.
    17                              <1> 
    18                              <1> b_config		equ 0x0000000000100040	; View/modify configuration. IN: RCX = Function, RAX = Variable 1, RDX = Variable 2. OUT: RAX = Result
    19                              <1> b_system		equ 0x0000000000100048	; Call a system function. IN: RCX = Function, RAX = Variable 1, RDX = Variable 2. Out: RAX = Result 1, RDX = Result 2
    20                              <1> 
    21                              <1> 
    22                              <1> ; Index for b_config calls
    23                              <1> timecounter		equ 0
    24                              <1> smp_get_id		equ 1
    25                              <1> networkcallback_get	equ 3
    26                              <1> networkcallback_set	equ 4
    27                              <1> clockcallback_get	equ 5
    28                              <1> clockcallback_set	equ 6
    29                              <1> mac			equ 30
    30                              <1> pci_read		equ 0x40
    31                              <1> pci_write		equ 0x41
    32                              <1> stdout_set		equ 0x42
    33                              <1> stdout_get		equ 0x43
    34                              <1> drive_id		equ 0x50
    35                              <1> 
    36                              <1> 
    37                              <1> ; Index for b_system calls
    38                              <1> smp_lock		equ 2
    39                              <1> smp_unlock		equ 3
    40                              <1> debug_dump_mem		equ 4
    41                              <1> debug_dump_rax		equ 5
    42                              <1> get_argc		equ 6
    43                              <1> get_argv		equ 7
    44                              <1> delay			equ 6
    45                              <1> ethernet_status		equ 7
    46                              <1> mem_get_free		equ 8
    47                              <1> smp_numcores		equ 9
    48                              <1> smp_set			equ 10
    49                              <1> reset			equ 256
    50                              <1> 
    51                              <1> ; =============================================================================
    52                              <1> ; EOF
    11                                  
    12                                  start:				; Start of program label
    13                                  
    14 00000000 48BE-                   	mov rsi, startmessage	; Load RSI with memory address of string
    14 00000002 [8503000000000000] 
    15 0000000A E827030000              	call output		; Print the string that RSI points to
    16                                  
    17                                  ;Get processor brand string
    18 0000000F 4831C0                  	xor rax, rax
    19 00000012 48BF-                   	mov rdi, tstring
    19 00000014 [6E04000000000000] 
    20 0000001C B802000080              	mov eax, 0x80000002
    21 00000021 0FA2                    	cpuid
    22 00000023 AB                      	stosd
    23 00000024 89D8                    	mov eax, ebx
    24 00000026 AB                      	stosd
    25 00000027 89C8                    	mov eax, ecx
    26 00000029 AB                      	stosd
    27 0000002A 89D0                    	mov eax, edx
    28 0000002C AB                      	stosd
    29 0000002D B803000080              	mov eax, 0x80000003
    30 00000032 0FA2                    	cpuid
    31 00000034 AB                      	stosd
    32 00000035 89D8                    	mov eax, ebx
    33 00000037 AB                      	stosd
    34 00000038 89C8                    	mov eax, ecx
    35 0000003A AB                      	stosd
    36 0000003B 89D0                    	mov eax, edx
    37 0000003D AB                      	stosd
    38 0000003E B804000080              	mov eax, 0x80000004
    39 00000043 0FA2                    	cpuid
    40 00000045 AB                      	stosd
    41 00000046 89D8                    	mov eax, ebx
    42 00000048 AB                      	stosd
    43 00000049 89C8                    	mov eax, ecx
    44 0000004B AB                      	stosd
    45 0000004C 89D0                    	mov eax, edx
    46 0000004E AB                      	stosd
    47 0000004F 30C0                    	xor al, al
    48 00000051 AA                      	stosb			; Terminate the string
    49 00000052 48BE-                   	mov rsi, cpustringmsg
    49 00000054 [9A03000000000000] 
    50 0000005C E8D5020000              	call output
    51 00000061 48BE-                   	mov rsi, tstring
    51 00000063 [6E04000000000000] 
    52                                  check_for_space:		; Remove the leading spaces from the string
    53 0000006B 803E20                  	cmp byte [rsi], ' '
    54 0000006E 7506                    	jne print_cpu_string
    55 00000070 4883C601                	add rsi, 1
    56 00000074 EBF5                    	jmp check_for_space
    57                                  print_cpu_string:
    58 00000076 E8BB020000              	call output
    59                                  
    60                                  ; Number of cores
    61 0000007B 48BE-                   	mov rsi, numcoresmsg
    61 0000007D [A703000000000000] 
    62 00000085 E8AC020000              	call output
    63 0000008A 4831C0                  	xor rax, rax
    64 0000008D BE12500000              	mov rsi, 0x5012
    65 00000092 66AD                    	lodsw
    66 00000094 48BF-                   	mov rdi, tstring
    66 00000096 [6E04000000000000] 
    67 0000009E E8BA020000              	call int_to_string
    68 000000A3 48BE-                   	mov rsi, tstring
    68 000000A5 [6E04000000000000] 
    69 000000AD E884020000              	call output
    70                                  
    71                                  ; Speed
    72 000000B2 48BE-                   	mov rsi, speedmsg
    72 000000B4 [BA03000000000000] 
    73 000000BC E875020000              	call output
    74 000000C1 4831C0                  	xor rax, rax
    75 000000C4 BE10500000              	mov rsi, 0x5010
    76 000000C9 66AD                    	lodsw
    77 000000CB 48BF-                   	mov rdi, tstring
    77 000000CD [6E04000000000000] 
    78 000000D5 E883020000              	call int_to_string
    79 000000DA 48BE-                   	mov rsi, tstring
    79 000000DC [6E04000000000000] 
    80 000000E4 E84D020000              	call output
    81 000000E9 48BE-                   	mov rsi, mhzmsg
    81 000000EB [3004000000000000] 
    82 000000F3 E83E020000              	call output
    83                                  
    84                                  ; L1 code/data cache info
    85 000000F8 B805000080              	mov eax, 0x80000005	; L1 cache info
    86 000000FD 0FA2                    	cpuid
    87 000000FF 89D0                    	mov eax, edx		; EDX bits 31 - 24 store code L1 cache size in KBs
    88 00000101 C1E818                  	shr eax, 24
    89 00000104 48BF-                   	mov rdi, tstring
    89 00000106 [6E04000000000000] 
    90 0000010E E84A020000              	call int_to_string
    91 00000113 48BE-                   	mov rsi, l1ccachemsg
    91 00000115 [CC03000000000000] 
    92 0000011D E814020000              	call output
    93 00000122 48BE-                   	mov rsi, tstring
    93 00000124 [6E04000000000000] 
    94 0000012C E805020000              	call output
    95 00000131 48BE-                   	mov rsi, kbmsg
    95 00000133 [2604000000000000] 
    96 0000013B E8F6010000              	call output
    97 00000140 89C8                    	mov eax, ecx		; ECX bits 31 - 24 store data L1 cache size in KBs
    98 00000142 C1E818                  	shr eax, 24
    99 00000145 48BF-                   	mov rdi, tstring
    99 00000147 [6E04000000000000] 
   100 0000014F E809020000              	call int_to_string
   101 00000154 48BE-                   	mov rsi, l1dcachemsg
   101 00000156 [DD03000000000000] 
   102 0000015E E8D3010000              	call output
   103 00000163 48BE-                   	mov rsi, tstring
   103 00000165 [6E04000000000000] 
   104 0000016D E8C4010000              	call output
   105 00000172 48BE-                   	mov rsi, kbmsg
   105 00000174 [2604000000000000] 
   106 0000017C E8B5010000              	call output
   107                                  
   108                                  ; L2/L3 cache info
   109 00000181 B806000080              	mov eax, 0x80000006	; L2/L3 cache info
   110 00000186 0FA2                    	cpuid
   111 00000188 89C8                    	mov eax, ecx		; ecx bits 31 - 16 store unified L2 cache size in KBs
   112 0000018A C1E810                  	shr eax, 16
   113 0000018D 48BF-                   	mov rdi, tstring
   113 0000018F [6E04000000000000] 
   114 00000197 E8C1010000              	call int_to_string
   115 0000019C 48BE-                   	mov rsi, l2ucachemsg
   115 0000019E [EE03000000000000] 
   116 000001A6 E88B010000              	call output
   117 000001AB 48BE-                   	mov rsi, tstring
   117 000001AD [6E04000000000000] 
   118 000001B5 E87C010000              	call output
   119 000001BA 48BE-                   	mov rsi, kbmsg
   119 000001BC [2604000000000000] 
   120 000001C4 E86D010000              	call output
   121                                  
   122 000001C9 89D0                    	mov eax, edx		; edx bits 31 - 18 store unified L3 cache size in 512 KB chunks
   123 000001CB C1E812                  	shr eax, 18
   124 000001CE 25FFFF0300              	and eax, 0x3FFFF	; Clear bits 18 - 31
   125 000001D3 C1E009                  	shl eax, 9		; Convert the value for 512 KB chunks to KBs (Multiply by 512)
   126 000001D6 48BF-                   	mov rdi, tstring
   126 000001D8 [6E04000000000000] 
   127 000001E0 E878010000              	call int_to_string
   128 000001E5 48BE-                   	mov rsi, l3ucachemsg
   128 000001E7 [0204000000000000] 
   129 000001EF E842010000              	call output
   130 000001F4 48BE-                   	mov rsi, tstring
   130 000001F6 [6E04000000000000] 
   131 000001FE E833010000              	call output
   132 00000203 48BE-                   	mov rsi, kbmsg
   132 00000205 [2604000000000000] 
   133 0000020D E824010000              	call output
   134                                  
   135                                  ;CPU features
   136 00000212 48BE-                   	mov rsi, cpufeatures
   136 00000214 [1604000000000000] 
   137 0000021C E815010000              	call output
   138 00000221 B801000000              	mov rax, 1
   139 00000226 0FA2                    	cpuid
   140                                  
   141                                  checksse:
   142 00000228 F7C200000002            	test edx, 00000010000000000000000000000000b
   143 0000022E 740F                    	jz checksse2
   144 00000230 48BE-                   	mov rsi, sse
   144 00000232 [3504000000000000] 
   145 0000023A E8F7000000              	call output
   146                                  
   147                                  checksse2:
   148 0000023F F7C200000004            	test edx, 00000100000000000000000000000000b
   149 00000245 740F                    	jz checksse3
   150 00000247 48BE-                   	mov rsi, sse2
   150 00000249 [3A04000000000000] 
   151 00000251 E8E0000000              	call output
   152                                  
   153                                  checksse3:
   154 00000256 F7C101000000            	test ecx, 00000000000000000000000000000001b
   155 0000025C 740F                    	jz checkssse3
   156 0000025E 48BE-                   	mov rsi, sse3
   156 00000260 [4004000000000000] 
   157 00000268 E8C9000000              	call output
   158                                  
   159                                  checkssse3:
   160 0000026D F7C100020000            	test ecx, 00000000000000000000001000000000b
   161 00000273 740F                    	jz checksse41
   162 00000275 48BE-                   	mov rsi, ssse3
   162 00000277 [4604000000000000] 
   163 0000027F E8B2000000              	call output
   164                                  
   165                                  checksse41:
   166 00000284 F7C100000800            	test ecx, 00000000000010000000000000000000b
   167 0000028A 740F                    	jz checksse42
   168 0000028C 48BE-                   	mov rsi, sse41
   168 0000028E [4D04000000000000] 
   169 00000296 E89B000000              	call output
   170                                  
   171                                  checksse42:
   172 0000029B F7C100001000            	test ecx, 00000000000100000000000000000000b
   173 000002A1 740F                    	jz checkaes
   174 000002A3 48BE-                   	mov rsi, sse42
   174 000002A5 [5504000000000000] 
   175 000002AD E884000000              	call output
   176                                  
   177                                  checkaes:
   178 000002B2 F7C100000002            	test ecx, 00000010000000000000000000000000b
   179 000002B8 740F                    	jz checkavx
   180 000002BA 48BE-                   	mov rsi, aes
   180 000002BC [5D04000000000000] 
   181 000002C4 E86D000000              	call output
   182                                  
   183                                  checkavx:
   184 000002C9 F7C100000010            	test ecx, 00010000000000000000000000000000b
   185 000002CF 740F                    	jz endit
   186 000002D1 48BE-                   	mov rsi, avx
   186 000002D3 [6204000000000000] 
   187 000002DB E856000000              	call output
   188                                  
   189                                  endit:
   190                                  
   191                                  ;RAM
   192 000002E0 48BE-                   	mov rsi, memmessage
   192 000002E2 [6704000000000000] 
   193 000002EA E847000000              	call output
   194 000002EF 4831C0                  	xor rax, rax
   195 000002F2 BE20500000              	mov rsi, 0x5020
   196 000002F7 66AD                    	lodsw
   197 000002F9 48BF-                   	mov rdi, tstring
   197 000002FB [6E04000000000000] 
   198 00000303 E855000000              	call int_to_string
   199 00000308 48BE-                   	mov rsi, tstring
   199 0000030A [6E04000000000000] 
   200 00000312 E81F000000              	call output
   201 00000317 48BE-                   	mov rsi, mbmsg
   201 00000319 [2B04000000000000] 
   202 00000321 E810000000              	call output
   203                                  
   204                                  ;Disk
   205                                  ;	To be added
   206                                  
   207                                  ;Fin
   208 00000326 48BE-                   	mov rsi, newline
   208 00000328 [9803000000000000] 
   209 00000330 E801000000              	call output
   210                                  
   211 00000335 C3                      ret				; Return to OS
   212                                  
   213                                  
   214                                  ; -----------------------------------------------------------------------------
   215                                  ; output -- Displays text
   216                                  ;  IN:	RSI = message location (zero-terminated string)
   217                                  ; OUT:	All registers preserved
   218                                  output:
   219 00000336 51                      	push rcx
   220                                  
   221 00000337 E809000000              	call string_length	; Calculate the string length
   222 0000033C FF142518001000          	call [b_output]		; Output the string via the kernel syscall
   223                                  
   224 00000343 59                      	pop rcx
   225 00000344 C3                      	ret
   226                                  ; -----------------------------------------------------------------------------
   227                                  
   228                                  
   229                                  ; -----------------------------------------------------------------------------
   230                                  ; string_length -- Return length of a string
   231                                  ;  IN:	RSI = string location
   232                                  ; OUT:	RCX = length (not including the NULL terminator)
   233                                  ;	All other registers preserved
   234                                  string_length:
   235 00000345 57                      	push rdi
   236 00000346 50                      	push rax
   237                                  
   238 00000347 31C9                    	xor ecx, ecx
   239 00000349 31C0                    	xor eax, eax
   240 0000034B 4889F7                  	mov rdi, rsi
   241 0000034E 48F7D1                  	not rcx
   242 00000351 FC                      	cld
   243 00000352 F2AE                    	repne scasb			; compare byte at RDI to value in AL
   244 00000354 48F7D1                  	not rcx
   245 00000357 48FFC9                  	dec rcx
   246                                  
   247 0000035A 58                      	pop rax
   248 0000035B 5F                      	pop rdi
   249 0000035C C3                      	ret
   250                                  ; -----------------------------------------------------------------------------
   251                                  
   252                                  
   253                                  ; -----------------------------------------------------------------------------
   254                                  ; int_to_string -- Convert a binary interger into an string
   255                                  ;  IN:	RAX = binary integer
   256                                  ;	RDI = location to store string
   257                                  ; OUT:	RDI = points to end of string
   258                                  ;	All other registers preserved
   259                                  ; Min return value is 0 and max return value is 18446744073709551615 so your
   260                                  ; string needs to be able to store at least 21 characters (20 for the digits
   261                                  ; and 1 for the string terminator).
   262                                  ; Adapted from http://www.cs.usfca.edu/~cruse/cs210s09/rax2uint.s
   263                                  int_to_string:
   264 0000035D 52                      	push rdx
   265 0000035E 51                      	push rcx
   266 0000035F 53                      	push rbx
   267 00000360 50                      	push rax
   268                                  
   269 00000361 BB0A000000              	mov rbx, 10					; base of the decimal system
   270 00000366 31C9                    	xor ecx, ecx					; number of digits generated
   271                                  int_to_string_next_divide:
   272 00000368 31D2                    	xor edx, edx					; RAX extended to (RDX,RAX)
   273 0000036A 48F7F3                  	div rbx						; divide by the number-base
   274 0000036D 52                      	push rdx					; save remainder on the stack
   275 0000036E 48FFC1                  	inc rcx						; and count this remainder
   276 00000371 4883F800                	cmp rax, 0					; was the quotient zero?
   277 00000375 75F1                    	jne int_to_string_next_divide			; no, do another division
   278                                  int_to_string_next_digit:
   279 00000377 58                      	pop rax						; else pop recent remainder
   280 00000378 0430                    	add al, '0'					; and convert to a numeral
   281 0000037A AA                      	stosb						; store to memory-buffer
   282 0000037B E2FA                    	loop int_to_string_next_digit			; again for other remainders
   283 0000037D 30C0                    	xor al, al
   284 0000037F AA                      	stosb						; Store the null terminator at the end of the string
   285                                  
   286 00000380 58                      	pop rax
   287 00000381 5B                      	pop rbx
   288 00000382 59                      	pop rcx
   289 00000383 5A                      	pop rdx
   290 00000384 C3                      	ret
   291                                  ; -----------------------------------------------------------------------------
   292                                  
   293                                  
   294 00000385 53797374656D20496E-     startmessage: db 'System Information:' ; String falls through to newline
   294 0000038E 666F726D6174696F6E-
   294 00000397 3A                 
   295 00000398 0D00                    newline: db 13, 0
   296 0000039A 43505520537472696E-     cpustringmsg: db 'CPU String: ', 0
   296 000003A3 673A2000           
   297 000003A7 0D4E756D626572206F-     numcoresmsg: db 13, 'Number of cores: ', 0
   297 000003B0 6620636F7265733A20-
   297 000003B9 00                 
   298 000003BA 0D4465746563746564-     speedmsg: db 13, 'Detected speed: ', 0
   298 000003C3 2073706565643A2000 
   299 000003CC 0D4C3120636F646520-     l1ccachemsg: db 13, 'L1 code cache: ', 0
   299 000003D5 63616368653A2000   
   300 000003DD 0D4C31206461746120-     l1dcachemsg: db 13, 'L1 data cache: ', 0
   300 000003E6 63616368653A2000   
   301 000003EE 0D4C3220756E696669-     l2ucachemsg: db 13, 'L2 unified cache: ', 0
   301 000003F7 65642063616368653A-
   301 00000400 2000               
   302 00000402 0D4C3320756E696669-     l3ucachemsg: db 13, 'L3 unified cache: ', 0
   302 0000040B 65642063616368653A-
   302 00000414 2000               
   303 00000416 0D4350552066656174-     cpufeatures: db 13, 'CPU features: ', 0
   303 0000041F 757265733A2000     
   304 00000426 204B694200              kbmsg: db ' KiB', 0
   305 0000042B 204D694200              mbmsg: db ' MiB', 0
   306 00000430 204D487A00              mhzmsg: db ' MHz', 0
   307 00000435 5353452000              sse: db 'SSE ', 0
   308 0000043A 535345322000            sse2: db 'SSE2 ', 0
   309 00000440 535345332000            sse3: db 'SSE3 ', 0
   310 00000446 53535345332000          ssse3: db 'SSSE3 ', 0
   311 0000044D 535345342E312000        sse41: db 'SSE4.1 ', 0
   312 00000455 535345342E322000        sse42: db 'SSE4.2 ', 0
   313 0000045D 4145532000              aes: db 'AES ', 0
   314 00000462 4156582000              avx: db 'AVX ', 0
   315 00000467 0D52414D3A2000          memmessage: db 13, 'RAM: ', 0
   316                                  
   317 0000046E 00<rept>                tstring: times 50 db 0
